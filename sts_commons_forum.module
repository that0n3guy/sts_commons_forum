<?php

include_once('sts_commons_forum.features.inc');

/**
 *  Tell Advanced forum about my drupal commons theme
 */
function sts_commons_forum_ctools_plugin_directory($module, $plugin) {
  if ($module == 'advanced_forum') {
    return 'drupal_commons_af';
  }
}



/**
 * Implementation of hook_form_alter().
 */
 function sts_commons_forum_form_alter(&$form, &$form_state, $form_id) {
  // Auto-select group's forum when adding/editing a forum topic
  if ($form_id == 'forum_node_form') {
		//get the vid for the "forum" vocab
		$vid =  variable_get('forum_nav_vocabulary', '');
		//get the group node from group context
    $node = og_get_group_context();
    //if we couldn't get the context from og, don't give up. Try getting it from the nid if we have one.
    if (empty($node)) {
			//use the default value (if editing) to define the group context
			$dv = $form['taxonomy'][$vid]['#default_value'];
			$sql = "SELECT gid FROM {sts_commons_forum}
						WHERE fctid= %d";
			//get the parents of the tid
			$gidtree = array_reverse(taxonomy_get_parents_all($dv[0]));
			//get the gid from the matching top-most parent tid
			$gid = db_result(db_query($sql, $gidtree[0]->tid));
			unset($gidtree[0]);
			$node = node_load($gid);
			og_set_group_context($node);
		}
		else {
			$sql = "SELECT fctid FROM {sts_commons_forum}
						WHERE gid= %d";
			$result = db_fetch_object(db_query($sql, $node->nid));
			$gtax = taxonomy_get_term($result->fctid);
			$gidtree = taxonomy_get_tree($vid, $gtax->tid, NULL, $max_depth = NULL);
		}
		foreach($gidtree as $key => $stuff) {
			$mytids[$stuff->tid] = $stuff->name;
		}
		$term = $gtax->tid;
		if (isset($node->nid)) {
			$gid = $node->nid;
      if (arg(1) == 'add') {
				if($form['taxonomy'][$vid]['#default_value'][0] =='') {
					$form['taxonomy'][$vid]['#default_value'] = array($term);			
				}
      }
      elseif (arg(2) == 'edit') { 
        $term = $form['taxonomy'][$vid]['#default_value'][0];
      }
			//unset forum terms that aren't in this group.
      foreach ($form['taxonomy'][$vid]['#options'] as $key => $the_rest) { 
        if ($key === '') {  
          continue;
        }
        if (!array_key_exists(key($the_rest->option),$mytids)) {
          unset($form['taxonomy'][$vid]['#options'][$key]);
        }
       }
			if (empty($form['og_nodeapi']['visible']['og_groups']['#default_value'])) {
				$form['og_nodeapi']['visible']['og_groups']['#default_value'] = array(0 => $node->nid);
			}
			//set a slightly different title
			$form['taxonomy'][$vid]['#title'] = check_plain($node->title) . " Forums";
		}
		global $user;
		if (!in_array($node->nid, array_keys($user->og_groups)) && !user_access('administer organic groups')) {
			unset($form['buttons']);
			unset($form['body_field']);
			unset($form['title']);
			drupal_set_message("$user->name You do not have access to post to this group.", $type = 'status', $repeat = TRUE);
			drupal_set_title(check_plain('Access Denied - Create Forum Topic'));
		}
	}
} 


/**
 * Save recursive array of terms for a vocabulary.
 *
 * Example:
 * <code><?php
 * $terms = array(
 *   'Species' => array(
 *     'Dog',
 *     'Cat',
 *     'Bird' ),
 *   'Sex' => array(
 *     'Male',
 *     'Female' ) )
 * _save_terms_recursive( $vid, $terms );
 * </code>
 *
 * @param int $vid Vocabulary id
 * @param array $terms Recursive array of terms
 * @param int $ptid Parent term id (generated by taxonomy_save_term) 
 */
function _save_terms_recursive( $vid, &$terms, $ptid=0 ) {
  foreach ( $terms as $k => $v ) {
    // simple check for numeric indices (term array without children)
    $name = is_string( $k ) ? $k : $v;
    $term = array( 'vid' => $vid, 'name' => $name, 'parent' => $ptid );
    taxonomy_save_term( $term );
    if ( is_array( $v ) && count( $v ) )
      _save_terms_recursive( $vid, $terms[ $k ], $term[ 'tid' ] );
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function sts_commons_forum_nodeapi(&$node, $op) {
 switch ($op) {
	case 'insert':
		if ($node->type == 'group' && module_exists('forum')) {

			$forumvid = variable_get('forum_nav_vocabulary', '');
			$containername = (string) $node->title . ' (Group Forum)';
			$terms = array(
				check_plain($containername) => array(
					'General',
				),
			);
			_save_terms_recursive($forumvid, $terms );
			$fcterm = taxonomy_get_term_by_name($containername);
			$write = array (
				'gid' => $node->nid,
				'fctid' => $fcterm[0]->tid,
			);
			drupal_write_record('sts_commons_forum', $write);
			$containers = variable_get('forum_containers', array());
			$containers[] = (string) $fcterm[0]->tid;
			variable_set('forum_containers', $containers);
		}
	break;
	case 'update':
		if ($node->type == 'group' && module_exists('forum')) {

				$sql = "SELECT fctid FROM {sts_commons_forum}
								WHERE gid = %d";
				$result = db_fetch_object(db_query($sql, $node->nid)); 
				$fcterm = (array)taxonomy_get_term($result->fctid);
				$containername = (string) $node->title . ' (Group Forum)';
				$fcterm['name'] = check_plain($containername);
				taxonomy_save_term($fcterm);
		}
	break;
		case 'delete':
			if ($node->type == 'group' && module_exists('forum')) {
				db_query("DELETE FROM {sts_commons_forum} WHERE gid = %d", $node->nid);
			}
  }
}


function sts_commons_forum_preprocess_node(&$variables) {
  	if (!empty($variables['page']) && $variables['type'] == 'forum') {
    $node = _sts_commons_forum_set_breadcrumb($variables['node'], TRUE); 
  }
}

function sts_commons_forum_preprocess_forums(&$variables) {
	// Remove forum containers & forum that are related to reviews for the Discussion Root
	// See page-forum.tpl.php
	if (count($variables["parents"]) == 0) {
		if (!empty($variables['user']->og_groups)) {
		  //get all the group ids that the user is a part of
			$forum_container_gids = array_keys($variables['user']->og_groups);
			//get the matching forum tids from gids
			foreach($forum_container_gids as $key => $else) {
					$sql = "SELECT fctid FROM {sts_commons_forum}
								WHERE gid = %d";
				$result = db_result(db_query($sql, $else));
				$forum_viewable_ids[] = $result;
			}		
			//Get just the tids of the forums about to be displayed
			$forumtids = array_keys($variables['forums']);
			//Compare all the forum tids to the ones the user is a part of.
			//these are the ids to remove viewing from
			$forum_container_ids = array_diff($forumtids, $forum_viewable_ids);
			//run through each non-in-group tid and specify remove the are public from array.
			//whatever is left will be removed from the forum display below
			foreach($forum_container_ids as $key => $tid) {
				$tidstatus = sts_is_tidog_private($tid);
				if ($tidstatus == 'public') {
					unset($forum_container_ids[$key]);
					//add this id to the viewable ids
					$forum_viewable_ids[] = $tid;
				} 
				if ($tidstatus == 'notcontainer') {
					if (in_array($variables['forums'][$tid]->parents[0], $forum_viewable_ids)) {
						unset($forum_container_ids[$key]);
						//add this id to the viewable ids
						$forum_viewable_ids[] = $tid;
					}
				}
			}
			//What is left in forum_container_ids is non-in-group or public forums... remove them from view.
			foreach($variables['forums'] as $id => $forum) {
				if (in_array($id, $forum_container_ids)) {
					unset($variables['forums'][$id]);
				}
				if (in_array($forum->parents[0], $forum_container_ids)) {
					unset($variables['forums'][$id]);
				}
			}
		}
		//user isn't a part of any groups... he can only see public group forums
		else {
			foreach($variables['forums'] as $id => $forum) {
				$tidstatus = sts_is_tidog_private($id);
				if ($tidstatus == 'private') {
					unset($variables['forums'][$id]);
					$privateids[] = $id;
				} 
				if ($tidstatus == 'notcontainer') {
					if (in_array($forum->parents[0], $privateids)) {
						unset($variables['forums'][$id]);
					}
				}
			}
			drupal_set_title(check_plain('Forum - Access Limited'));
			drupal_set_message('You have not joined any groups yet so you will have limmited access.  Please join a group.', $type = 'warning', $repeat = TRUE);
		}
	}
  if(isset($variables['tid']) && $variables['tid'] != 0) {
      $node = _sts_commons_forum_set_breadcrumb($variables);
			og_set_group_context($node);
      if (isset($variables['links']['forum'])) {
        //$variables['links']['forum']['query'] = array('gids[]' => $gid);
      }
    
  }
}

function sts_is_tidog_private ($tid) {
	$sql = "SELECT gid FROM {sts_commons_forum}
					WHERE fctid = %d";
	$gid = db_result(db_query($sql, $tid));
	if ($gid != '') {
		$sql2 = 'SELECT node.nid AS nid FROM node node  LEFT JOIN og og ON node.nid = og.nid WHERE (og.og_private <> 0) AND (node.nid = %d)';
		$result2 = db_fetch_object(db_query($sql2, $gid));
		$private = $result2 != '' ? 'private' : 'public';
		return $private;
	}
	return 'notcontainer';
}

/**
 * 
 * @param $variables
 */
// function sts_commons_forum_preprocess_forum_list(&$variables) {
 // dsm($variables);  
	// // Remove forum containers & forum that are related to reviews for the Discussion Root
	// // See page-forum.tpl.php
	// if (count($variables["parents"]) == 0) {
		// $forum_container_ids = array(12, 30, 40); // Ids of the container you want to hide
		// foreach($variables['forums'] as $id => $forum) {
			// if (in_array($id, $forum_container_ids)) {
				// unset($variables['forums'][$id]);
			// }
 
			// if (in_array($forum->parents[0], $forum_container_ids)) {
				// unset($variables['forums'][$id]);
			// }
 
		// }
	// }
// }

function _sts_commons_forum_set_breadcrumb($nodevar, $is_forum_post = FALSE) {
	if(!$is_forum_post) {
			$nodevar->tid;
			foreach ($nodevar['parents'] as $key => $terminfo) {
					$sql = "SELECT gid FROM {sts_commons_forum}
								WHERE fctid = %d";
				$result = db_fetch_object(db_query($sql, $terminfo->tid));
				if (!empty($result)) {
					$node = node_load($result->gid);
				}
			}
		$gid = $node->nid;
		$tid = $nodevar['tid'];
		$gname = $node->title;
	}
	else {
		$node = $nodevar;
		$tid = $node->tid;
		$gid = key($node->og_groups);
		$gname = end($node->og_groups_both);
	}
	$sql = "SELECT fctid FROM {sts_commons_forum}
					WHERE gid = %d";
	$result = db_fetch_object(db_query($sql, $gid));
  //$title = 'mytest';
  // Breadcrumb navigation:
  $breadcrumb[] = l(t('Home'), NULL);
	$parents = array_reverse(taxonomy_get_parents_all($tid));
  if ($gid != NULL) {
  $breadcrumb[] = l(t('Groups'), 'groups'); 
	$breadcrumb[] = l($gname, 'node/'.$gid);
  }
  if ($parents && count($parents) != 1) {
    $p = array_shift($parents);
    $title = t('Group Forums');
	$breadcrumb[] = l($title, 'node/'.$gid.'/content/forum');
    foreach ($parents as $p) {
      if ($p->tid == $tid) {
        $title = $p->name;
        if ($is_forum_post)
          	$breadcrumb[] = l(t($p->name), 'forum/' .$p->tid);
      }
      else {
        $breadcrumb[] = l(t($p->name), 'forum/' .$p->tid);
      }
    }
  }
  if (!$is_forum_post)
    drupal_set_title(check_plain($title));
  drupal_set_breadcrumb($breadcrumb);	
	return $node;
}



